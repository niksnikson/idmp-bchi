ggplot(data) + geom_bar(aes(x = `reading score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `math score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `test preparation course`), position = "dodge")
library("tidyverse")
library("dplyr")
library("mlbench")
library("modelr")
ggplot(data, aes(x = charges)) + geom_histogram(fill = 'purple') +
xlab('Medical expense of a family') + ggtitle('Expense of a family')
ggplot(data=data) + geom_bar(aes(x =`math score`, fill = gender))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = gender), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = gender), position = "dodge")
ggplot(data) + geom_bar(aes(x = `math score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `math score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `math score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `reading score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `math score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `test preparation course`), position = "dodge")
ggplot(data=data) + geom_bar(aes(x =`math score`, fill = gender))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = gender), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = gender), position = "dodge")
ggplot(data) + geom_bar(aes(x = `math score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `race/ethnicity`))
ggplot(data) + geom_bar(aes(x = `math score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `parental level of education`))
ggplot(data) + geom_bar(aes(x = `math score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `reading score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = lunch), position = "dodge")
ggplot(data) + geom_bar(aes(x = `math score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `reading score`, fill = `test preparation course`), position = "dodge")
ggplot(data) + geom_bar(aes(x = `writing score`, fill = `test preparation course`), position = "dodge")
library(tidyverse)
# load data
data <- read.csv("../Data/heart.csv")
getwd()
getwd()
# load data
data <- read.csv("../Data/heart.csv")
setwd("~/GitHub/idmp-bchi/CDA + ML")
# load data
data <- read.csv("../Data/heart.csv")
data <- data.frame(data, check.names=FALSE, stringsAsFactors=FALSE)
head(data)
#formal col name
names(data)[1] <- 'age'
data$target <- as.character(data$target)
data$sex <- as.character(data$sex)
data$fbs <- as.character(data$fbs)
data$cp <- as.character(data$cp)
data$restecg <- as.character(data$restecg)
data$exang <- as.character(data$exang)
data$slope <- as.character(data$slope)
data$ca <- as.character(data$ca)
data$thal <- as.character(data$thal)
ols_step_best_subset(model)
install.packages("olsrr")
model <- lm(target ~ age + sex + cp + trestbps + chol + fbs + restecg
+ thalch + exang + oldpeak + slope + ca + thal)
model <- lm(target ~ age + sex + cp + trestbps + chol + fbs + restecg
+ thalch + exang + oldpeak + slope + ca + thal, data=data)
a
model <- lm(target ~ age + sex + cp + trestbps + chol + fbs + restecg
+ thalach + exang + oldpeak + slope + ca + thal, data=data)
ols_step_best_subset(model)
ols_step_best_subset(model)
library(olsrr)
ols_step_best_subset(model)
k <- ols_step_best_subset(model)
plot(k)
model1 <- lm(target ~ age + cp + trestbps + chol + fbs + restecg
+ thalach + exang + oldpeak + slope + ca + thal, data=data)
k1 <- ols_step_best_subset(model1)
plot(k1)
#set seed
set.seed(1)
library(purrr)
data_cv <- crossv_kfold(data, 5)
library(modelr)
data_cv <- crossv_kfold(data, 5)
View(data_cv)
k1
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~cp + slope + ca + thal, data = .)))
View(data_cv[[1]][[1]])
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data_cv)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(data_cv$target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
View(data_cv[[1]][[1]])
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data_cv)))
data_cv
# 5-cross validation
df = data
data_cv <- crossv_kfold(df, 5)
View(data_cv[[1]][[1]])
View(data_cv)
View(data_cv[[1]][[1]])
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = df)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- crossv_kfold(df, 5)
View(data_cv)
View(data_cv[[1]][[1]])
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = df)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal)))
data_cv
# load data
data <- read.csv("../Data/heart.csv")
data <- data.frame(data, check.names=FALSE, stringsAsFactors=FALSE)
head(data)
#formal col name
names(data)[1] <- 'age'
data$target <- as.character(data$target)
data$sex <- as.character(data$sex)
data$fbs <- as.character(data$fbs)
data$cp <- as.character(data$cp)
data$restecg <- as.character(data$restecg)
data$exang <- as.character(data$exang)
data$slope <- as.character(data$slope)
data$ca <- as.character(data$ca)
data$thal <- as.character(data$thal)
#set seed
set.seed(1)
model1 <- lm(target ~ age + cp + trestbps + chol + fbs + restecg
+ thalach + exang + oldpeak + slope + ca + thal, data=data)
k1 <- ols_step_best_subset(model1)
k1
# 5-cross validation
data_cv <- crossv_kfold(data, 5)
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal)))
data_cv
library(tidyverse)
library(olsrr)
library(purrr)
library(modelr)
# load data
data <- read.csv("../Data/heart.csv")
data <- data.frame(data, check.names=FALSE, stringsAsFactors=FALSE)
head(data)
#format col name
names(data)[1] <- 'age'
data$target <- as.character(data$target)
data$sex <- as.character(data$sex)
data$fbs <- as.character(data$fbs)
data$cp <- as.character(data$cp)
data$restecg <- as.character(data$restecg)
data$exang <- as.character(data$exang)
data$slope <- as.character(data$slope)
data$ca <- as.character(data$ca)
data$thal <- as.character(data$thal)
#set seed
set.seed(1)
model1 <- lm(target ~ age + cp + trestbps + chol + fbs + restecg
+ thalach + exang + oldpeak + slope + ca + thal, data=data)
k1 <- ols_step_best_subset(model1)
warning()
warning()
k1
# 5-cross validation
data_cv <- crossv_kfold(data, 5)
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data_cv)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
rmse(model1)
rmse(model1, data)
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_cv
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data_cv)))
data_cv
# 5-cross validation
data_cv <- crossv_kfold(data, 5)
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = data_cv)))
data_cv <- data_cv %>%
mutate(fit = map(train, lm(target ~ cp + slope + ca + thal, data = .)))
data_s <- resample_partition(data, c(train = 0.8, test = 0.2))
View(data_s)
data_s$train
print(data_s$train)
data_s$train <- as_tibble(data_s$train)
print(data_s$train)
data_s$test <- as_tibble(data_s$test)
# Feature Scaling
data_s$train[-3] = scale(data_s$train[-3])
data_s = data(cp, thalach, exang, oldpeak)
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak'))
View(data)
data_s$cp = factor(data_s$cp, levels = c(0, 1, 2, 3))
data_s$exang = factor(data_s$exang, levels = c(0, 1))
data_s$target = factor(data_s$target, levels = c(0, 1))
# load data
data <- read.csv("../Data/heart.csv")
data <- data.frame(data, check.names=FALSE, stringsAsFactors=FALSE)
#format col name
names(data)[1] <- 'age'
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak'))
View(data_s)
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
data_s$cp = factor(data_s$cp, levels = c(0, 1, 2, 3))
data_s$exang = factor(data_s$exang, levels = c(0, 1))
data_s$target = factor(data_s$target, levels = c(0, 1))
# split train test
data_s <- resample_partition(data_s, c(train = 0.8, test = 0.2))
data_s$train <- as_tibble(data_s$train)
data_s$test <- as_tibble(data_s$test)
#set seed
set.seed(1)
# split train test
data_s <- resample_partition(data_s, c(train = 0.8, test = 0.2))
# load data
data <- read.csv("../Data/heart.csv")
data <- data.frame(data, check.names=FALSE, stringsAsFactors=FALSE)
#set seed
set.seed(1)
#subset
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
#factor
data_s$cp = factor(data_s$cp, levels = c(0, 1, 2, 3))
data_s$exang = factor(data_s$exang, levels = c(0, 1))
data_s$target = factor(data_s$target, levels = c(0, 1))
# split train test
data_s <- resample_partition(data_s, c(train = 0.8, test = 0.2))
data_s$train <- as_tibble(data_s$train)
data_s$test <- as_tibble(data_s$test)
# Feature Scaling
data_s$train[-3] = scale(data_s$train[-3])
# Feature Scaling
data_s$train[5] = scale(data_s$train[-5])
#subset
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
data_s$target = factor(data_s$target, levels = c(0, 1))
# split train test
data_s <- resample_partition(data_s, c(train = 0.8, test = 0.2))
data_s$train <- as_tibble(data_s$train)
data_s$test <- as_tibble(data_s$test)
# Feature Scaling
data_s$train[5] = scale(data_s$train[-5])
#subset
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
data_s$target = factor(data_s$target, levels = c(0, 1))
# split train test
data_s <- resample_partition(data_s, c(train = 0.8, test = 0.2))
data_s$train <- as_tibble(data_s$train)
data_s$test <- as_tibble(data_s$test)
# Feature Scaling
data_s$train[-5] = scale(data_s$train[-5])
data_s$test[-5] = scale(data_s$test[-5])
data_s$test
library(e1071)
classifier = svm(formula = target ~ ., data = data_s$train,
type = 'C-classification', kernel = 'linear')
classifier
View(classifier)
y_pred = predict(classifier, newdata = data$test[-5])
data_s$test[-5] = scale(data_s$test[-5])
y_pred = predict(classifier, newdata = data_s$test[-5])
y_pred
# Making the Confusion Matrix
cm = table(data$test[, 5], y_pred)
# Making the Confusion Matrix
cm = table(data$test[, 3], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[, 5], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[, 3], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test, y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[,5], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[:5], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[5], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[target], y_pred)
# Making the Confusion Matrix
cm = table(data_s$test[,5], y_pred)
# Making the Confusion Matrix
cm = table(as.dataframe(data_s$test[,5]), y_pred)
# Making the Confusion Matrix
cm = table(as.data.frame(data_s$test[,5]), y_pred)
# Making the Confusion Matrix
cm = table(as.data.frame(data_s$test[,3]), y_pred)
#subset
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
data_s$target = factor(data_s$target, levels = c(0, 1))
install.packages('caTools')
library(caTools)
# Splitting the dataset into the Training set and Test set
split = sample.split(data_s$target, SplitRatio = 0.8)
training_set = subset(data_s, split == TRUE)
test_set = subset(data_s, split == FALSE)
View(test_set)
View(training_set)
test_set[-5] = scale(test_set[-5])
# Fitting SVM to the Training set
classifier = svm(formula = target ~ ., data = training_set,
type = 'C-classification', kernel = 'linear')
classifier
test_set[-5]
y_pred = predict(classifier, newdata = test_set[-5])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 5], y_pred)
cm
library(ElemStatLearn)
install.packages(ElemSatLearn)
install.packages(ElemStatLearn)
install.packages('ElemStatLearn')
library(randomForest)
install.packages("randomForest")
library(randomForest)
data <- transform(
data,
age=as.integer(age),
sex=as.factor(sex),
cp=as.factor(cp),
trestbps=as.integer(trestbps),
choi=as.integer(choi),
fbs=as.factor(fbs),
restecg=as.factor(restecg),
thalach=as.integer(thalach),
exang=as.factor(exang),
oldpeak=as.numeric(oldpeak),
slope=as.factor(slope),
ca=as.factor(ca),
thai=as.factor(thai),
num=as.factor(num)
)
#format col name
names(data)[1] <- 'age'
data <- transform(
data,
age=as.integer(age),
sex=as.factor(sex),
cp=as.factor(cp),
trestbps=as.integer(trestbps),
choi=as.integer(choi),
fbs=as.factor(fbs),
restecg=as.factor(restecg),
thalach=as.integer(thalach),
exang=as.factor(exang),
oldpeak=as.numeric(oldpeak),
slope=as.factor(slope),
ca=as.factor(ca),
thai=as.factor(thai),
num=as.factor(num)
)
data <- transform(
data,
age=as.integer(age),
sex=as.factor(sex),
cp=as.factor(cp),
trestbps=as.integer(trestbps),
chol=as.integer(chol),
fbs=as.factor(fbs),
restecg=as.factor(restecg),
thalach=as.integer(thalach),
exang=as.factor(exang),
oldpeak=as.numeric(oldpeak),
slope=as.factor(slope),
ca=as.factor(ca),
thal=as.factor(thal),
target=as.factor(target)
)
sapply(data, class)
summary(data)
colSums(is.na(data))
sample = sample.split(data$target, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
rf <- randomForest(
target ~ .,
data=train
)
pred = predict(rf, newdata=test[-14])
cm = table(test[,14], pred)
cm
# randonm forest using 4 vars
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
# split
sample = sample.split(data_s$target, SplitRatio = .75)
train = subset(data_s, sample == TRUE)
test  = subset(data_s, sample == FALSE)
dim(train)
dim(test)
# initialise randomforest
rf <- randomForest(
target ~ .,
data=train
)
#predict
pred = predict(rf, newdata=test[-5])
#confusion matrix
cm = table(test[,5], pred)
cm
xtab <- table(pred, target)
xtab <- table(pred, data_s$test[target])
xtab <- table(pred, data_s$test$target)
confusionMatrix(cm)
# load Caret package for computing Confusion matrix
library(caret)
confusionMatrix(xtab)
confusionMatrix(cm)
# split
sample = sample.split(data$target, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
# initialise randomforest
rf <- randomForest(
target ~ .,
data=train
)
#predict
pred = predict(rf, newdata=test[-14])
#confusion matrix
cm = table(test[,14], pred)
# load Caret package for computing Confusion matrix
confusionMatrix(cm)
#------------------------------------------------------------------------#
# randonm forest using 4 vars
data_s = select(data,c('cp', 'thalach', 'exang', 'oldpeak','target'))
# split
sample = sample.split(data_s$target, SplitRatio = .75)
train1 = subset(data_s, sample == TRUE)
test1  = subset(data_s, sample == FALSE)
dim(train1)
# initialise randomforest
rf <- randomForest(
target ~ .,
data=train1
)
#predict
pred1 = predict(rf, newdata=test1[-5])
#confusion matrix
cm1 = table(test1[,5], pred1)
# load Caret package for computing Confusion matrix
confusionMatrix(cm1)
# split
sample = sample.split(data_s$target, SplitRatio = .8)
train1 = subset(data_s, sample == TRUE)
test1  = subset(data_s, sample == FALSE)
# initialise randomforest
rf <- randomForest(
target ~ .,
data=train1
)
#predict
pred1 = predict(rf, newdata=test1[-5])
#confusion matrix
cm1 = table(test1[,5], pred1)
# load Caret package for computing Confusion matrix
confusionMatrix(cm1)
# split
sample = sample.split(data$target, SplitRatio = .8)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
# initialise randomforest
rf <- randomForest(
target ~ .,
data=train
)
#predict
pred = predict(rf, newdata=test[-14])
#confusion matrix
cm = table(test[,14], pred)
confusionMatrix(cm)
